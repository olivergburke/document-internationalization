{"version":3,"file":"index.esm.js","sources":["../src/components/DeleteTranslationDialog/DocumentPreview.tsx","../src/constants.ts","../src/components/DeleteTranslationDialog/separateReferences.ts","../src/components/DeleteTranslationDialog/index.tsx","../src/components/DeleteTranslationFooter.tsx","../node_modules/suspend-react/dist/index.js","../src/components/DocumentInternationalizationContext.tsx","../src/actions/DeleteTranslationAction.tsx","../src/hooks/useLanguageMetadata.tsx","../src/hooks/useOpenInNewPane.tsx","../src/components/LanguageManage.tsx","../src/hooks/useOpenInCurrentPane.tsx","../src/utils/createReference.ts","../src/components/LanguageOption.tsx","../src/components/LanguagePatch.tsx","../src/components/ConstrainedBox.tsx","../src/components/Warning.tsx","../src/components/DocumentInternationalizationMenu.tsx","../src/actions/DeleteMetadataAction.tsx","../src/badges/index.tsx","../src/components/BulkPublish/DocumentCheck.tsx","../src/components/BulkPublish/InfoIcon.tsx","../src/components/BulkPublish/Info.tsx","../src/components/BulkPublish/index.tsx","../src/components/OptimisticallyStrengthen/ReferencePatcher.tsx","../src/components/OptimisticallyStrengthen/index.tsx","../src/schema/translation/metadata.ts","../src/plugin.tsx"],"sourcesContent":["import {Preview, useSchema} from 'sanity'\nimport {Feedback} from 'sanity-plugin-utils'\n\ntype DocumentPreviewProps = {\n  value: unknown\n  type: string\n}\n\n// Wrapper of Preview just so that the schema type is satisfied by schema.get()\nexport default function DocumentPreview(props: DocumentPreviewProps) {\n  const schema = useSchema()\n\n  const schemaType = schema.get(props.type)\n  if (!schemaType) {\n    return <Feedback tone=\"critical\" title=\"Schema type not found\" />\n  }\n\n  return <Preview value={props.value} schemaType={schemaType} />\n}\n","import {PluginConfigContext} from './types'\n\nexport const METADATA_SCHEMA_NAME = `translation.metadata`\nexport const TRANSLATIONS_ARRAY_NAME = `translations`\nexport const API_VERSION = `2023-05-22`\nexport const DEFAULT_CONFIG: PluginConfigContext = {\n  supportedLanguages: [],\n  schemaTypes: [],\n  languageField: `language`,\n  weakReferences: false,\n  bulkPublish: false,\n  metadataFields: [],\n  apiVersion: API_VERSION,\n}\n","import {SanityDocument} from 'sanity'\n\nimport {METADATA_SCHEMA_NAME} from '../../constants'\n\nexport function separateReferences(data: SanityDocument[] | null = []): {\n  translations: SanityDocument[]\n  otherReferences: SanityDocument[]\n} {\n  const translations: SanityDocument[] = []\n  const otherReferences: SanityDocument[] = []\n\n  if (data && data.length > 0) {\n    data.forEach((doc) => {\n      if (doc._type === METADATA_SCHEMA_NAME) {\n        translations.push(doc)\n      } else {\n        otherReferences.push(doc)\n      }\n    })\n  }\n\n  return {translations, otherReferences}\n}\n","import {Card, Flex, Spinner, Stack, Text} from '@sanity/ui'\nimport {useEffect, useMemo} from 'react'\nimport {SanityDocument} from 'sanity'\nimport {useListeningQuery} from 'sanity-plugin-utils'\n\nimport DocumentPreview from './DocumentPreview'\nimport {separateReferences} from './separateReferences'\n\ntype DeleteTranslationDialogProps = {\n  doc: SanityDocument\n  documentId: string\n  setTranslations: (translations: SanityDocument[]) => void\n}\n\nexport default function DeleteTranslationDialog(\n  props: DeleteTranslationDialogProps\n) {\n  const {doc, documentId, setTranslations} = props\n\n  // Get all references and check if any of them are translations metadata\n  const {data, loading} = useListeningQuery<SanityDocument[]>(\n    `*[references($id)]{_id, _type}`,\n    {params: {id: documentId}, initialValue: []}\n  )\n  const {translations, otherReferences} = useMemo(\n    () => separateReferences(data),\n    [data]\n  )\n\n  useEffect(() => {\n    setTranslations(translations)\n  }, [setTranslations, translations])\n\n  if (loading) {\n    return (\n      <Flex padding={4} align=\"center\" justify=\"center\">\n        <Spinner />\n      </Flex>\n    )\n  }\n\n  return (\n    <Stack space={4}>\n      {translations && translations.length > 0 ? (\n        <Text>\n          This document is a language-specific version which other translations\n          depend on.\n        </Text>\n      ) : (\n        <Text>This document does not have connected translations.</Text>\n      )}\n      <Card border padding={3}>\n        <Stack space={4}>\n          <Text size={1} weight=\"semibold\">\n            {translations && translations.length > 0 ? (\n              <>Before this document can be deleted</>\n            ) : (\n              <>This document can now be deleted</>\n            )}\n          </Text>\n          <DocumentPreview value={doc} type={doc._type} />\n          {translations && translations.length > 0 ? (\n            <>\n              <Card borderTop />\n              <Text size={1} weight=\"semibold\">\n                The reference in{' '}\n                {translations.length === 1\n                  ? `this translations document`\n                  : `these translations documents`}{' '}\n                must be removed\n              </Text>\n              {translations.map((translation) => (\n                <DocumentPreview\n                  key={translation._id}\n                  value={translation}\n                  type={translation._type}\n                />\n              ))}\n            </>\n          ) : null}\n          {otherReferences && otherReferences.length > 0 ? (\n            <>\n              <Card borderTop />\n              <Text size={1} weight=\"semibold\">\n                {otherReferences.length === 1\n                  ? `There is an additional reference`\n                  : `There are additional references`}{' '}\n                to this document\n              </Text>\n              {otherReferences.map((reference) => (\n                <DocumentPreview\n                  key={reference._id}\n                  value={reference}\n                  type={reference._type}\n                />\n              ))}\n            </>\n          ) : null}\n        </Stack>\n      </Card>\n      {otherReferences.length === 0 ? (\n        <Text>This document has no other references.</Text>\n      ) : (\n        <Text>\n          You may not be able to delete this document because other documents\n          refer to it.\n        </Text>\n      )}\n    </Stack>\n  )\n}\n","import {Button, Grid} from '@sanity/ui'\n\ntype DeleteTranslationFooterProps = {\n  translations: unknown[]\n  onClose: () => void\n  onProceed: () => void\n}\n\nexport default function DeleteTranslationFooter(\n  props: DeleteTranslationFooterProps\n) {\n  const {translations, onClose, onProceed} = props\n\n  return (\n    <Grid columns={2} gap={2}>\n      <Button text=\"Cancel\" onClick={onClose} mode=\"ghost\" />\n      <Button\n        text={\n          translations && translations.length > 0\n            ? `Unset translation reference`\n            : `Delete document`\n        }\n        onClick={onProceed}\n        tone=\"critical\"\n      />\n    </Grid>\n  )\n}\n","function shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nconst globalCache = [];\n\nfunction query(fn, keys, preload = false, config = {}) {\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) return entry.response; // If the promise is still unresolved, throw\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    promise: // Execute the promise\n    fn(...keys) // When it resolves, store its value\n    .then(response => entry.response = response) // Remove the entry if a lifespan was given\n    .then(() => {\n      if (config.lifespan && config.lifespan > 0) {\n        setTimeout(() => {\n          const index = globalCache.indexOf(entry);\n          if (index !== -1) globalCache.splice(index, 1);\n        }, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n\n    if (entry) {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    }\n  }\n};\n\nexport { clear, peek, preload, suspend };\n","import {useContext} from 'react'\nimport {createContext} from 'react'\nimport {LayoutProps, useClient} from 'sanity'\nimport {suspend} from 'suspend-react'\n\nimport {DEFAULT_CONFIG} from '../constants'\nimport {PluginConfig, PluginConfigContext} from '../types'\n\nconst DocumentInternationalizationContext =\n  createContext<PluginConfigContext>(DEFAULT_CONFIG)\n\nexport function useDocumentInternationalizationContext() {\n  return useContext(DocumentInternationalizationContext)\n}\n\ntype DocumentInternationalizationProviderProps = LayoutProps & {\n  pluginConfig: Required<PluginConfig>\n}\n\n/**\n * This Provider wraps the Studio and provides the DocumentInternationalization context to document actions and components.\n */\nexport function DocumentInternationalizationProvider(\n  props: DocumentInternationalizationProviderProps\n) {\n  const {pluginConfig} = props\n\n  const client = useClient({apiVersion: pluginConfig.apiVersion})\n  const supportedLanguages = Array.isArray(pluginConfig.supportedLanguages)\n    ? pluginConfig.supportedLanguages\n    : // eslint-disable-next-line require-await\n      suspend(async () => {\n        if (typeof pluginConfig.supportedLanguages === 'function') {\n          return pluginConfig.supportedLanguages(client)\n        }\n        return pluginConfig.supportedLanguages\n      }, [])\n\n  return (\n    <DocumentInternationalizationContext.Provider\n      value={{...pluginConfig, supportedLanguages}}\n    >\n      {props.renderDefault(props)}\n    </DocumentInternationalizationContext.Provider>\n  )\n}\n","import {TrashIcon} from '@sanity/icons'\nimport {ButtonTone, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {DocumentActionComponent, SanityDocument, useClient} from 'sanity'\n\nimport DeleteTranslationDialog from '../components/DeleteTranslationDialog'\nimport DeleteTranslationFooter from '../components/DeleteTranslationFooter'\nimport {useDocumentInternationalizationContext} from '../components/DocumentInternationalizationContext'\nimport {API_VERSION, TRANSLATIONS_ARRAY_NAME} from '../constants'\n\nexport const DeleteTranslationAction: DocumentActionComponent = (props) => {\n  const {id: documentId, published, draft} = props\n  const doc = draft || published\n  const {languageField} = useDocumentInternationalizationContext()\n\n  const [isDialogOpen, setDialogOpen] = useState(false)\n  const [translations, setTranslations] = useState<SanityDocument[]>([])\n  const onClose = useCallback(() => setDialogOpen(false), [])\n  const documentLanguage = doc ? doc[languageField] : null\n\n  const toast = useToast()\n  const client = useClient({apiVersion: API_VERSION})\n\n  // Remove translation reference and delete document in one transaction\n  const onProceed = useCallback(() => {\n    const tx = client.transaction()\n    let operation = 'DELETE'\n\n    if (documentLanguage && translations.length > 0) {\n      operation = 'UNSET'\n      translations.forEach((translation) => {\n        tx.patch(translation._id, (patch) =>\n          patch.unset([\n            `${TRANSLATIONS_ARRAY_NAME}[_key == \"${documentLanguage}\"]`,\n          ])\n        )\n      })\n    } else {\n      tx.delete(documentId)\n      tx.delete(`drafts.${documentId}`)\n    }\n\n    tx.commit()\n      .then(() => {\n        if (operation === 'DELETE') {\n          onClose()\n        }\n        toast.push({\n          status: 'success',\n          title:\n            operation === 'UNSET'\n              ? 'Translation reference unset'\n              : 'Document deleted',\n          description:\n            operation === 'UNSET' ? 'The document can now be deleted' : null,\n        })\n      })\n      .catch((err) => {\n        toast.push({\n          status: 'error',\n          title:\n            operation === 'unset'\n              ? 'Failed to unset translation reference'\n              : 'Failed to delete document',\n          description: err.message,\n        })\n      })\n  }, [client, documentLanguage, translations, documentId, onClose, toast])\n\n  return {\n    label: `Delete translation...`,\n    disabled: !doc || !documentLanguage,\n    icon: TrashIcon,\n    tone: 'critical' as ButtonTone,\n    onHandle: () => {\n      setDialogOpen(true)\n    },\n    dialog: isDialogOpen && {\n      type: 'dialog',\n      onClose,\n      header: 'Delete translation',\n      content: doc ? (\n        <DeleteTranslationDialog\n          doc={doc}\n          documentId={documentId}\n          setTranslations={setTranslations}\n        />\n      ) : null,\n      footer: (\n        <DeleteTranslationFooter\n          onClose={onClose}\n          onProceed={onProceed}\n          translations={translations}\n        />\n      ),\n    },\n  }\n}\n","import {useListeningQuery} from 'sanity-plugin-utils'\n\nimport {METADATA_SCHEMA_NAME} from '../constants'\nimport {Metadata} from '../types'\n\n// Using references() seemed less reliable for updating the listener\n// results than querying raw values in the array\n// AFAIK: references is _faster_ when querying with GROQ\n// const query = `*[_type == $translationSchema && references($id)]`\nconst query = `*[_type == $translationSchema && $id in translations[].value._ref]{\n  _id,\n  _createdAt,\n  translations\n}`\n\nexport function useTranslationMetadata(id: string): {\n  data: Metadata[] | null\n  loading: boolean\n  error: boolean | unknown | ProgressEvent\n} {\n  const {data, loading, error} = useListeningQuery<Metadata[]>(query, {\n    params: {id, translationSchema: METADATA_SCHEMA_NAME},\n  })\n\n  return {data, loading, error}\n}\n","import {useCallback, useContext} from 'react'\nimport {usePaneRouter} from 'sanity/desk'\nimport {RouterContext} from 'sanity/router'\n\nexport function useOpenInNewPane(id?: string, type?: string) {\n  const routerContext = useContext(RouterContext)\n  const {routerPanesState, groupIndex} = usePaneRouter()\n\n  const openInNewPane = useCallback(() => {\n    if (!routerContext || !id || !type) {\n      return\n    }\n\n    // No panes open, function might be called outside Desk\n    if (!routerPanesState.length) {\n      routerContext.navigateIntent('edit', {id, type})\n      return\n    }\n\n    const panes = [...routerPanesState]\n    panes.splice(groupIndex + 1, 0, [\n      {\n        id: id,\n        params: {type},\n      },\n    ])\n\n    const href = routerContext.resolvePathFromState({panes})\n    routerContext.navigateUrl({path: href})\n  }, [id, type, routerContext, routerPanesState, groupIndex])\n\n  return openInNewPane\n}\n","import {CogIcon} from '@sanity/icons'\nimport {Box, Button, Stack, Text, Tooltip} from '@sanity/ui'\n\nimport {METADATA_SCHEMA_NAME} from '../constants'\nimport {useOpenInNewPane} from '../hooks/useOpenInNewPane'\n\ntype LanguageManageProps = {\n  id?: string\n}\n\nexport default function LanguageManage(props: LanguageManageProps) {\n  const {id} = props\n  const open = useOpenInNewPane(id, METADATA_SCHEMA_NAME)\n\n  return (\n    <Tooltip\n      content={\n        id ? null : (\n          <Box padding={2}>\n            <Text muted size={1}>\n              Document has no other translations\n            </Text>\n          </Box>\n        )\n      }\n      fallbackPlacements={['right', 'left']}\n      placement=\"top\"\n      portal\n    >\n      <Stack>\n        <Button\n          disabled={!id}\n          mode=\"ghost\"\n          text=\"Manage Translations\"\n          icon={CogIcon}\n          onClick={() => open()}\n        />\n      </Stack>\n    </Tooltip>\n  )\n}\n","import {useCallback, useContext} from 'react'\nimport {usePaneRouter} from 'sanity/desk'\nimport {RouterContext} from 'sanity/router'\n\nexport function useOpenInCurrentPane(id?: string, type?: string) {\n  const routerContext = useContext(RouterContext)\n  const {routerPanesState, groupIndex} = usePaneRouter()\n\n  const openInCurrentPane = useCallback(() => {\n    if (!routerContext || !id || !type) {\n      return\n    }\n\n    // No panes open, function might be called outside Desk\n    if (!routerPanesState.length) {\n      routerContext.navigateIntent('edit', {id, type})\n      return\n    }\n\n    const panes = [...routerPanesState]\n    panes.splice(groupIndex, 1, [\n      {\n        id: id,\n        params: {type},\n      },\n    ])\n\n    const href = routerContext.resolvePathFromState({panes})\n    routerContext.navigateUrl({path: href})\n  }, [id, type, routerContext, routerPanesState, groupIndex])\n\n  return openInCurrentPane\n}","import {TranslationReference} from '../types'\n\nexport function createReference(\n  key: string,\n  ref: string,\n  type: string,\n  strengthenOnPublish: boolean = true\n): TranslationReference {\n  return {\n    _key: key,\n    _type: 'internationalizedArrayReferenceValue',\n    value: {\n      _type: 'reference',\n      _ref: ref,\n      _weak: true,\n      // If the user has configured weakReferences, we won't want to strengthen them\n      ...(strengthenOnPublish ? {_strengthenOnPublish: {type}} : {}),\n    },\n  }\n}\n","import {AddIcon, CheckmarkIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {\n  Badge,\n  Box,\n  Button,\n  Flex,\n  Spinner,\n  Text,\n  Tooltip,\n  useToast,\n} from '@sanity/ui'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback} from 'react'\nimport {SanityDocument, useClient} from 'sanity'\n\nimport {API_VERSION, METADATA_SCHEMA_NAME} from '../constants'\nimport {useOpenInCurrentPane} from '../hooks/useOpenInCurrentPane'\nimport {Language, Metadata, TranslationReference} from '../types'\nimport {createReference} from '../utils/createReference'\nimport {useDocumentInternationalizationContext} from './DocumentInternationalizationContext'\n\ntype LanguageOptionProps = {\n  language: Language\n  schemaType: string\n  documentId: string\n  disabled: boolean\n  current: boolean\n  source: SanityDocument | null\n  metadataId: string | null\n  metadata?: Metadata | null\n  sourceLanguageId?: string\n}\n\nexport default function LanguageOption(props: LanguageOptionProps) {\n  const {\n    language,\n    schemaType,\n    documentId,\n    current,\n    source,\n    sourceLanguageId,\n    metadata,\n    metadataId,\n  } = props\n  const disabled =\n    props.disabled || current || !source || !sourceLanguageId || !metadataId\n  const translation: TranslationReference | undefined = metadata?.translations\n    .length\n    ? metadata.translations.find((t) => t._key === language.id)\n    : undefined\n  const {apiVersion, languageField, weakReferences} =\n    useDocumentInternationalizationContext()\n  const client = useClient({apiVersion})\n  const toast = useToast()\n\n  const open = useOpenInCurrentPane(translation?.value?._ref, schemaType)\n  const handleOpen = useCallback(() => open(), [open])\n\n  const handleCreate = useCallback(async () => {\n    if (!source) {\n      throw new Error(`Cannot create translation without source document`)\n    }\n\n    if (!sourceLanguageId) {\n      throw new Error(`Cannot create translation without source language ID`)\n    }\n\n    if (!metadataId) {\n      throw new Error(`Cannot create translation without a metadata ID`)\n    }\n\n    const transaction = client.transaction()\n\n    // 1. Duplicate source document\n    const newTranslationDocumentId = uuid()\n    const newTranslationDocument = {\n      ...source,\n      _id: `drafts.${newTranslationDocumentId}`,\n      // 2. Update language of the translation\n      [languageField]: language.id,\n    }\n\n    transaction.create(newTranslationDocument)\n\n    // 3. Maybe create the metadata document\n    const sourceReference = createReference(\n      sourceLanguageId,\n      documentId,\n      schemaType,\n      !weakReferences\n    )\n    const newTranslationReference = createReference(\n      language.id,\n      newTranslationDocumentId,\n      schemaType,\n      !weakReferences\n    )\n    const newMetadataDocument = {\n      _id: metadataId,\n      _type: METADATA_SCHEMA_NAME,\n      schemaTypes: [schemaType],\n      translations: [sourceReference],\n    }\n\n    transaction.createIfNotExists(newMetadataDocument)\n\n    // 4. Patch translation to metadata document\n    // Note: If the document was only just created in the operation above\n    // This patch operation will have no effect\n    const metadataPatch = client\n      .patch(metadataId)\n      .setIfMissing({translations: [sourceReference]})\n      .insert(`after`, `translations[-1]`, [newTranslationReference])\n\n    transaction.patch(metadataPatch)\n\n    // 5. Commit!\n    transaction\n      .commit()\n      .then(() => {\n        const metadataExisted = Boolean(metadata?._createdAt)\n\n        return toast.push({\n          status: 'success',\n          title: `Created \"${language.title}\" translation`,\n          description: metadataExisted\n            ? `Updated Translations Metadata`\n            : `Created Translations Metadata`,\n        })\n      })\n      .catch((err) => {\n        console.error(err)\n\n        return toast.push({\n          status: 'error',\n          title: `Error creating translation`,\n          description: err.message,\n        })\n      })\n  }, [\n    client,\n    documentId,\n    language.id,\n    language.title,\n    languageField,\n    metadata?._createdAt,\n    metadataId,\n    schemaType,\n    source,\n    sourceLanguageId,\n    toast,\n  ])\n\n  let message\n\n  if (current) {\n    message = `Current document`\n  } else if (translation) {\n    message = `Open ${language.title} translation`\n  } else if (!translation) {\n    message = `Create new ${language.title} translation`\n  }\n\n  return (\n    <Tooltip\n      content={\n        <Box padding={2}>\n          <Text muted size={1}>\n            {message}\n          </Text>\n        </Box>\n      }\n      fallbackPlacements={['right', 'left']}\n      placement=\"top\"\n      portal\n    >\n      <Button\n        onClick={translation ? handleOpen : handleCreate}\n        mode={current && disabled ? `default` : `bleed`}\n        disabled={disabled}\n      >\n        <Flex gap={3} align=\"center\">\n          {disabled && !current ? (\n            <Spinner />\n          ) : (\n            <Text size={2}>\n              {/* eslint-disable-next-line no-nested-ternary */}\n              {translation ? (\n                <SplitVerticalIcon />\n              ) : current ? (\n                <CheckmarkIcon />\n              ) : (\n                <AddIcon />\n              )}\n            </Text>\n          )}\n          <Box flex={1}>\n            <Text>{language.title}</Text>\n          </Box>\n          <Badge tone={disabled || current ? `default` : `primary`}>\n            {language.id}\n          </Badge>\n        </Flex>\n      </Button>\n    </Tooltip>\n  )\n}\n","import {EditIcon} from '@sanity/icons'\nimport {Badge, Box, Button, Flex, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {SanityDocument, useClient} from 'sanity'\n\nimport {Language} from '../types'\nimport {useDocumentInternationalizationContext} from './DocumentInternationalizationContext'\n\ntype LanguagePatchProps = {\n  language: Language\n  source: SanityDocument | null\n  disabled: boolean\n}\n\nexport default function LanguagePatch(props: LanguagePatchProps) {\n  const {language, source} = props\n  const {apiVersion, languageField} = useDocumentInternationalizationContext()\n  const disabled = props.disabled || !source\n  const client = useClient({apiVersion})\n  const toast = useToast()\n\n  const handleClick = useCallback(() => {\n    if (!source) {\n      throw new Error(`Cannot patch missing document`)\n    }\n\n    const currentId = source._id\n\n    client\n      .patch(currentId)\n      .set({[languageField]: language.id})\n      .commit()\n      .then(() => {\n        toast.push({\n          title: `Set document language to ${language.title}`,\n          status: `success`,\n        })\n      })\n      .catch((err) => {\n        console.error(err)\n\n        return toast.push({\n          title: `Failed to set document language to ${language.title}`,\n          status: `error`,\n        })\n      })\n  }, [source, client, languageField, language, toast])\n\n  return (\n    <Button\n      mode=\"bleed\"\n      onClick={handleClick}\n      disabled={disabled}\n      justify=\"flex-start\"\n    >\n      <Flex gap={3} align=\"center\">\n        <Text size={2}>\n          <EditIcon />\n        </Text>\n        <Box flex={1}>\n          <Text>{language.title}</Text>\n        </Box>\n        <Badge>{language.id}</Badge>\n      </Flex>\n    </Button>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport styled from 'styled-components'\n\nexport default styled(Box)`\n  max-width: 280px;\n`\n","import {Card, Flex, Text} from '@sanity/ui'\nimport {PropsWithChildren} from 'react'\n\nimport ConstrainedBox from './ConstrainedBox'\n\nexport default function Warning({children}: PropsWithChildren) {\n  return (\n    <Card tone=\"caution\" padding={3}>\n      <Flex justify=\"center\">\n        <ConstrainedBox>\n          <Text size={1} align=\"center\">\n            {children}\n          </Text>\n        </ConstrainedBox>\n      </Flex>\n    </Card>\n  )\n}\n","import {TranslateIcon} from '@sanity/icons'\nimport {\n  Box,\n  Button,\n  Card,\n  Popover,\n  Stack,\n  Text,\n  TextInput,\n  useClickOutside,\n} from '@sanity/ui'\nimport {uuid} from '@sanity/uuid'\nimport {FormEvent, useCallback, useMemo, useState} from 'react'\nimport {useEditState} from 'sanity'\n\nimport {useTranslationMetadata} from '../hooks/useLanguageMetadata'\nimport {DocumentInternationalizationMenuProps} from '../types'\nimport {useDocumentInternationalizationContext} from './DocumentInternationalizationContext'\nimport LanguageManage from './LanguageManage'\nimport LanguageOption from './LanguageOption'\nimport LanguagePatch from './LanguagePatch'\nimport Warning from './Warning'\n\nexport function DocumentInternationalizationMenu(\n  props: DocumentInternationalizationMenuProps\n) {\n  const {documentId} = props\n  const schemaType = props.schemaType.name\n  const {languageField, supportedLanguages} =\n    useDocumentInternationalizationContext()\n\n  // Search filter query\n  const [query, setQuery] = useState(``)\n  const handleQuery = useCallback((event: FormEvent<HTMLInputElement>) => {\n    if (event.currentTarget.value) {\n      setQuery(event.currentTarget.value)\n    } else {\n      setQuery(``)\n    }\n  }, [])\n\n  // UI Handlers\n  const [open, setOpen] = useState(false)\n  const handleClick = useCallback(() => setOpen((o) => !o), [])\n  const [button, setButton] = useState<HTMLElement | null>(null)\n  const [popover, setPopover] = useState<HTMLElement | null>(null)\n  const handleClickOutside = useCallback(() => setOpen(false), [])\n  useClickOutside(handleClickOutside, [button, popover])\n\n  // Get metadata from content lake\n  const {data, loading, error} = useTranslationMetadata(documentId)\n  const metadata = Array.isArray(data) && data.length ? data[0] : null\n\n  // Optimistically set a metadata ID for a newly created metadata document\n  // Cannot rely on generated metadata._id from useTranslationMetadata\n  // As the document store might not have returned it before creating another translation\n  const metadataId = useMemo(() => {\n    if (loading) {\n      return null\n    }\n\n    // Once created, these two values should be the same anyway\n    return metadata?._id ?? uuid()\n  }, [loading, metadata?._id])\n\n  // Duplicate a new language version from the most recent version of this document\n  const {draft, published} = useEditState(documentId, schemaType)\n  const source = draft || published\n\n  // Check for data issues\n  const documentIsInOneMetadataDocument = useMemo(() => {\n    return Array.isArray(data) && data.length <= 1\n  }, [data])\n  const sourceLanguageId = source?.[languageField] as string | undefined\n  const sourceLanguageIsValid = supportedLanguages.some(\n    (l) => l.id === sourceLanguageId\n  )\n  const allLanguagesAreValid = useMemo(() => {\n    const valid = supportedLanguages.every((l) => l.id && l.title)\n    if (!valid) {\n      console.warn(\n        `Not all languages are valid. It should be an array of objects with an \"id\" and \"title\" property. Or a function that returns an array of objects with an \"id\" and \"title\" property.`,\n        supportedLanguages\n      )\n    }\n\n    return valid\n  }, [supportedLanguages])\n\n  const content = (\n    <Box padding={1}>\n      {error ? (\n        <Card tone=\"critical\" padding={1}>\n          <Text>There was an error returning translations metadata</Text>\n        </Card>\n      ) : (\n        <Stack space={1}>\n          <LanguageManage id={metadata?._id} />\n          {supportedLanguages.length > 4 ? (\n            <TextInput\n              onChange={handleQuery}\n              value={query}\n              placeholder=\"Filter languages\"\n            />\n          ) : null}\n          {supportedLanguages.length > 0 ? (\n            <>\n              {/* Once metadata is loaded, there may be issues */}\n              {loading ? null : (\n                <>\n                  {/* Not all languages are valid */}\n                  {data && documentIsInOneMetadataDocument ? null : (\n                    <Warning>\n                      {/* TODO: Surface these documents to the user */}\n                      This document has been found in more than one Translations\n                      Metadata documents\n                    </Warning>\n                  )}\n                  {/* Not all languages are valid */}\n                  {allLanguagesAreValid ? null : (\n                    <Warning>\n                      Not all language objects are valid. See the console.\n                    </Warning>\n                  )}\n                  {/* Current document has no language field */}\n                  {sourceLanguageId ? null : (\n                    <Warning>\n                      Choose a language to apply to{' '}\n                      <strong>this Document</strong>\n                    </Warning>\n                  )}\n                  {/* Current document has an invalid language field */}\n                  {sourceLanguageId && !sourceLanguageIsValid ? (\n                    <Warning>\n                      Select a supported language. Current language value:{' '}\n                      <code>{sourceLanguageId}</code>\n                    </Warning>\n                  ) : null}\n                </>\n              )}\n              {supportedLanguages\n                .filter((language) => {\n                  if (query) {\n                    return language.title\n                      .toLowerCase()\n                      .includes(query.toLowerCase())\n                  }\n                  return true\n                })\n                .map((language) =>\n                  !loading && sourceLanguageId && sourceLanguageIsValid ? (\n                    // Button to duplicate this document to a new translation\n                    // And either create or update the metadata document\n                    <LanguageOption\n                      key={language.id}\n                      language={language}\n                      schemaType={schemaType}\n                      documentId={documentId}\n                      disabled={loading || !allLanguagesAreValid}\n                      current={language.id === sourceLanguageId}\n                      metadata={metadata}\n                      metadataId={metadataId}\n                      source={source}\n                      sourceLanguageId={sourceLanguageId}\n                    />\n                  ) : (\n                    // Button to set a language field on *this* document\n                    <LanguagePatch\n                      key={language.id}\n                      source={source}\n                      language={language}\n                      // Only allow language patch change to:\n                      // - Keys not in metadata\n                      // - The key of this document in the metadata\n                      disabled={\n                        (loading ||\n                          !allLanguagesAreValid ||\n                          metadata?.translations\n                            .filter((t) => t?.value?._ref !== documentId)\n                            .some((t) => t._key === language.id)) ??\n                        false\n                      }\n                    />\n                  )\n                )}\n            </>\n          ) : null}\n        </Stack>\n      )}\n    </Box>\n  )\n\n  const issueWithTranslations =\n    !loading && sourceLanguageId && !sourceLanguageIsValid\n\n  if (!documentId) {\n    return null\n  }\n\n  if (!schemaType) {\n    return null\n  }\n\n  return (\n    <Popover\n      constrainSize\n      content={content}\n      open={open}\n      portal\n      ref={setPopover}\n      overflow=\"auto\"\n      tone=\"default\"\n    >\n      <Button\n        text=\"Translations\"\n        mode=\"bleed\"\n        disabled={!source}\n        tone={\n          !source || loading || !issueWithTranslations ? undefined : `caution`\n        }\n        icon={TranslateIcon}\n        onClick={handleClick}\n        ref={setButton}\n        selected={open}\n      />\n    </Popover>\n  )\n}\n","import {TrashIcon} from '@sanity/icons'\nimport {ButtonTone, useToast} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  DocumentActionComponent,\n  KeyedObject,\n  Reference,\n  TypedObject,\n  useClient,\n} from 'sanity'\n\nimport {API_VERSION, TRANSLATIONS_ARRAY_NAME} from '../constants'\n\ntype TranslationReference = TypedObject &\n  KeyedObject & {\n    value: Reference\n  }\n\nexport const DeleteMetadataAction: DocumentActionComponent = (props) => {\n  const {id: documentId, published, draft, onComplete} = props\n  const doc = draft || published\n\n  const [isDialogOpen, setDialogOpen] = useState(false)\n  const onClose = useCallback(() => setDialogOpen(false), [])\n  const translations: TranslationReference[] = useMemo(\n    () =>\n      doc && Array.isArray(doc[TRANSLATIONS_ARRAY_NAME])\n        ? (doc[TRANSLATIONS_ARRAY_NAME] as TranslationReference[])\n        : [],\n    [doc]\n  )\n\n  const toast = useToast()\n  const client = useClient({apiVersion: API_VERSION})\n\n  // Remove translation reference and delete document in one transaction\n  const onProceed = useCallback(() => {\n    const tx = client.transaction()\n\n    tx.patch(documentId, (patch) => patch.unset([TRANSLATIONS_ARRAY_NAME]))\n\n    if (translations.length > 0) {\n      translations.forEach((translation) => {\n        tx.delete(translation.value._ref)\n        tx.delete(`drafts.${translation.value._ref}`)\n      })\n    }\n\n    tx.delete(documentId)\n    // Shouldn't exist as this document type is in liveEdit\n    tx.delete(`drafts.${documentId}`)\n\n    tx.commit()\n      .then(() => {\n        onClose()\n\n        toast.push({\n          status: 'success',\n          title: 'Deleted document and translations',\n        })\n      })\n      .catch((err) => {\n        toast.push({\n          status: 'error',\n          title: 'Failed to delete document and translations',\n          description: err.message,\n        })\n      })\n  }, [client, translations, documentId, onClose, toast])\n\n  return {\n    label: `Delete all translations`,\n    disabled: !doc || !translations.length,\n    icon: TrashIcon,\n    tone: 'critical' as ButtonTone,\n    onHandle: () => {\n      setDialogOpen(true)\n    },\n    dialog: isDialogOpen && {\n      type: 'confirm',\n      onCancel: onComplete,\n      onConfirm: () => {\n        onProceed()\n        onComplete()\n      },\n      tone: 'critical' as ButtonTone,\n      message:\n        translations.length === 1\n          ? `Delete 1 translation and this document`\n          : `Delete all ${translations.length} translations and this document`,\n    },\n  }\n}\n","import {DocumentBadgeDescription, DocumentBadgeProps} from 'sanity'\n\nimport {useDocumentInternationalizationContext} from '../components/DocumentInternationalizationContext'\n\nexport function LanguageBadge(\n  props: DocumentBadgeProps\n): DocumentBadgeDescription | null {\n  const source = props?.draft || props?.published\n  const {languageField, supportedLanguages} =\n    useDocumentInternationalizationContext()\n  const languageId = source?.[languageField]\n\n  if (!languageId) {\n    return null\n  }\n\n  const language = Array.isArray(supportedLanguages)\n    ? supportedLanguages.find((l) => l.id === languageId)\n    : null\n\n  // Currently we only show the language id if the supportedLanguages are async\n  return {\n    label: language?.id ?? String(languageId),\n    title: language?.title ?? undefined,\n    color: `primary`,\n  }\n}\n","import {Card, Spinner} from '@sanity/ui'\nimport React, {useEffect, useMemo} from 'react'\nimport {Preview, useEditState, useSchema, useValidationStatus} from 'sanity'\n\ntype DocumentCheckProps = {\n  id: string\n  onCheckComplete: (id: string) => void\n  addInvalidId: (id: string) => void\n  removeInvalidId: (id: string) => void\n  addDraftId: (id: string) => void\n  removeDraftId: (id: string) => void\n}\n\n// Check if the document has a draft\n// Check if that draft is valid\n// Report back to parent that it can be added to bulk publish\nexport default function DocumentCheck(props: DocumentCheckProps) {\n  const {\n    id,\n    onCheckComplete,\n    addInvalidId,\n    removeInvalidId,\n    addDraftId,\n    removeDraftId,\n  } = props\n  const editState = useEditState(id, ``)\n  const {isValidating, validation} = useValidationStatus(id, ``)\n  const schema = useSchema()\n\n  const validationHasErrors = useMemo(() => {\n    return (\n      !isValidating &&\n      validation.length > 0 &&\n      validation.some((item) => item.level === 'error')\n    )\n  }, [isValidating, validation])\n\n  useEffect(() => {\n    if (validationHasErrors) {\n      addInvalidId(id)\n    } else {\n      removeInvalidId(id)\n    }\n\n    if (editState.draft) {\n      addDraftId(id)\n    } else {\n      removeDraftId(id)\n    }\n\n    if (!isValidating) {\n      onCheckComplete(id)\n    }\n  }, [\n    addDraftId,\n    addInvalidId,\n    editState.draft,\n    id,\n    isValidating,\n    onCheckComplete,\n    removeDraftId,\n    removeInvalidId,\n    validationHasErrors,\n  ])\n\n  // We only care about drafts\n  if (!editState.draft) {\n    return null\n  }\n\n  const schemaType = schema.get(editState.draft._type)\n\n  return (\n    <Card\n      border\n      padding={2}\n      tone={validationHasErrors ? `critical` : `positive`}\n    >\n      {editState.draft && schemaType ? (\n        <Preview\n          layout=\"default\"\n          value={editState.draft}\n          schemaType={schemaType}\n        />\n      ) : (\n        <Spinner />\n      )}\n    </Card>\n  )\n}\n","import {Box, ButtonTone, Text, Tooltip} from '@sanity/ui'\nimport React, {PropsWithChildren} from 'react'\nimport {TextWithTone} from 'sanity'\n\ntype InfoIconProps = PropsWithChildren & {\n  icon: React.ComponentType\n  tone: ButtonTone\n  text?: string\n}\n\nexport default function InfoIcon(props: InfoIconProps) {\n  const {text, icon, tone, children} = props\n  const Icon = icon\n\n  return (\n    <Tooltip\n      portal\n      content={\n        children ? (\n          <>{children}</>\n        ) : (\n          <Box padding={2}>\n            <Text size={1}>{text}</Text>\n          </Box>\n        )\n      }\n    >\n      <TextWithTone tone={tone} size={1}>\n        <Icon />\n      </TextWithTone>\n    </Tooltip>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Stack, Text} from '@sanity/ui'\n\nimport InfoIcon from './InfoIcon'\n\nexport default function Info() {\n  return (\n    <InfoIcon icon={InfoOutlineIcon} tone=\"primary\">\n      <Stack padding={3} space={4} style={{maxWidth: 250}}>\n        <Box>\n          <Text size={1}>Bulk publishing uses the Scheduling API.</Text>\n        </Box>\n        <Box>\n          <Text size={1}>\n            Customized Document Actions in the Studio will not execute. Webhooks\n            will execute.\n          </Text>\n        </Box>\n        <Box>\n          <Text size={1}>\n            Validation is checked before rendering the button below, but the\n            Scheduling API will not check for – or enforce – validation.\n          </Text>\n        </Box>\n      </Stack>\n    </InfoIcon>\n  )\n}\n","import {Button, Card, Dialog, Inline, Stack, Text, useToast} from '@sanity/ui'\nimport React, {useCallback, useState} from 'react'\nimport {TextWithTone, useClient, useWorkspace} from 'sanity'\n\nimport {API_VERSION} from '../../constants'\nimport {TranslationReference} from '../../types'\nimport DocumentCheck from './DocumentCheck'\nimport Info from './Info'\n\nexport type BulkPublishProps = {\n  translations: TranslationReference[]\n}\n\n// A root-level component with UI for hitting the Publishing API\nexport default function BulkPublish(props: BulkPublishProps) {\n  const {translations} = props\n  const client = useClient({apiVersion: API_VERSION})\n  const {projectId, dataset} = useWorkspace()\n  const toast = useToast()\n  const [invalidIds, setInvalidIds] = useState<string[] | null>(null)\n  const [checkedIds, setCheckedIds] = useState<string[]>([])\n\n  const onCheckComplete = useCallback((id: string) => {\n    setCheckedIds((ids) => Array.from(new Set([...ids, id])))\n  }, [])\n\n  // Handle dialog\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => setOpen(true), [])\n  const onClose = useCallback(() => setOpen(false), [])\n\n  const addInvalidId = useCallback((id: string) => {\n    setInvalidIds((ids) => (ids ? Array.from(new Set([...ids, id])) : [id]))\n  }, [])\n\n  const removeInvalidId = useCallback((id: string) => {\n    setInvalidIds((ids) => (ids ? ids.filter((i) => i !== id) : []))\n  }, [])\n\n  const [draftIds, setDraftIds] = useState<string[]>([])\n\n  const addDraftId = useCallback((id: string) => {\n    setDraftIds((ids) => Array.from(new Set([...ids, id])))\n  }, [])\n\n  const removeDraftId = useCallback((id: string) => {\n    setDraftIds((ids) => ids.filter((i) => i !== id))\n  }, [])\n\n  const handleBulkPublish = useCallback(() => {\n    const body = translations.map((translation) => ({\n      documentId: translation.value._ref,\n    }))\n    client\n      .request({\n        uri: `/publish/${projectId}/${dataset}`,\n        method: 'POST',\n        body,\n      })\n      .then(() => {\n        toast.push({\n          status: 'success',\n          title: 'Success',\n          description: 'Bulk publish complete',\n        })\n      })\n      .catch((err) => {\n        console.error(err)\n        toast.push({\n          status: 'error',\n          title: 'Error',\n          description: 'Bulk publish failed',\n        })\n      })\n  }, [translations, client, projectId, dataset, toast])\n\n  const disabled =\n    // Not all documents have been checked\n    checkedIds.length !== translations.length ||\n    // Some document(s) are invalid\n    Boolean(invalidIds && invalidIds?.length > 0) ||\n    // No documents are drafts\n    !draftIds.length\n\n  return translations?.length > 0 ? (\n    <Card padding={4} border radius={2}>\n      <Stack space={3}>\n        <Inline space={3}>\n          <Text weight=\"bold\" size={1}>\n            Bulk publishing\n          </Text>\n          <Info />\n        </Inline>\n\n        <Stack>\n          <Button\n            onClick={onOpen}\n            text=\"Prepare bulk publishing\"\n            mode=\"ghost\"\n          />\n        </Stack>\n\n        {open && (\n          <Dialog\n            header=\"Bulk publishing\"\n            id=\"bulk-publish-dialog\"\n            onClose={onClose}\n            zOffset={1000}\n            width={3}\n          >\n            <Stack space={4} padding={4}>\n              {draftIds.length > 0 ? (\n                <Stack space={2}>\n                  <Text size={1}>\n                    There{' '}\n                    {draftIds.length === 1\n                      ? `is 1 draft document`\n                      : `are ${draftIds.length} draft documents`}\n                    .\n                  </Text>\n                  {invalidIds && invalidIds.length > 0 ? (\n                    <TextWithTone tone=\"critical\" size={1}>\n                      {invalidIds && invalidIds.length === 1\n                        ? `1 draft document has`\n                        : `${\n                            invalidIds && invalidIds.length\n                          } draft documents have`}{' '}\n                      validation issues that must addressed first\n                    </TextWithTone>\n                  ) : (\n                    <TextWithTone tone=\"positive\" size={1}>\n                      All drafts are valid and can be bulk published\n                    </TextWithTone>\n                  )}\n                </Stack>\n              ) : null}\n\n              <Stack space={1}>\n                {translations\n                  .filter((translation) => translation?.value?._ref)\n                  .map((translation) => (\n                    <DocumentCheck\n                      key={translation._key}\n                      id={translation.value._ref}\n                      onCheckComplete={onCheckComplete}\n                      addInvalidId={addInvalidId}\n                      removeInvalidId={removeInvalidId}\n                      addDraftId={addDraftId}\n                      removeDraftId={removeDraftId}\n                    />\n                  ))}\n              </Stack>\n              {draftIds.length > 0 ? (\n                <Button\n                  mode=\"ghost\"\n                  tone={\n                    invalidIds && invalidIds?.length > 0\n                      ? 'caution'\n                      : 'positive'\n                  }\n                  text={\n                    draftIds.length === 1\n                      ? `Publish draft document`\n                      : `Bulk publish ${draftIds.length} draft documents`\n                  }\n                  onClick={handleBulkPublish}\n                  disabled={disabled}\n                />\n              ) : (\n                <Text muted size={1}>\n                  No draft documents to publish\n                </Text>\n              )}\n            </Stack>\n          </Dialog>\n        )}\n      </Stack>\n    </Card>\n  ) : null\n}\n","import {useEffect} from 'react'\nimport {PatchEvent, unset, useClient, useEditState} from 'sanity'\nimport {useDocumentPane} from 'sanity/desk'\n\nimport {API_VERSION} from '../../constants'\nimport {TranslationReference} from '../../types'\n\ntype ReferencePatcherProps = {\n  translation: TranslationReference\n  documentType: string\n  metadataId: string\n}\n\n// For every reference, check if it is published, and if so, strengthen the reference\nexport default function ReferencePatcher(props: ReferencePatcherProps) {\n  const {translation, documentType, metadataId} = props\n  const editState = useEditState(translation.value._ref, documentType)\n  const client = useClient({apiVersion: API_VERSION})\n  const {onChange} = useDocumentPane()\n\n  useEffect(() => {\n    if (\n      // We have a reference\n      translation.value._ref &&\n      // It's still weak and not-yet-strengthened\n      translation.value._weak &&\n      // We also want to keep this check because maybe the user *configured* weak refs\n      translation.value._strengthenOnPublish &&\n      // The referenced document has just been published\n      !editState.draft &&\n      editState.published &&\n      editState.ready\n    ) {\n      const referencePathBase = [\n        'translations',\n        {_key: translation._key},\n        'value',\n      ]\n\n      onChange(\n        new PatchEvent([\n          unset([...referencePathBase, '_weak']),\n          unset([...referencePathBase, '_strengthenOnPublish']),\n        ])\n      )\n    }\n  }, [translation, editState, metadataId, client, onChange])\n\n  return null\n}\n","import {TranslationReference} from '../../types'\nimport ReferencePatcher from './ReferencePatcher'\n\ntype OptimisticallyStrengthenProps = {\n  translations: TranslationReference[]\n  metadataId: string\n}\n\n// There's no good reason to leave published references as weak\n// So this component will run on every render and strengthen them\nexport default function OptimisticallyStrengthen(\n  props: OptimisticallyStrengthenProps\n) {\n  const {translations = [], metadataId} = props\n\n  if (!translations.length) {\n    return null\n  }\n\n  return (\n    <>\n      {translations.map((translation) =>\n        translation.value._strengthenOnPublish?.type ? (\n          <ReferencePatcher\n            key={translation._key}\n            translation={translation}\n            documentType={translation.value._strengthenOnPublish.type}\n            metadataId={metadataId}\n          />\n        ) : null\n      )}\n    </>\n  )\n}\n","import {TranslateIcon} from '@sanity/icons'\nimport {\n  defineField,\n  defineType,\n  DocumentDefinition,\n  FieldDefinition,\n} from 'sanity'\n\nimport {METADATA_SCHEMA_NAME, TRANSLATIONS_ARRAY_NAME} from '../../constants'\n\nexport default (\n  schemaTypes: string[],\n  metadataFields: FieldDefinition[]\n): DocumentDefinition =>\n  defineType({\n    type: 'document',\n    name: METADATA_SCHEMA_NAME,\n    title: 'Translation metadata',\n    icon: TranslateIcon,\n    liveEdit: true,\n    fields: [\n      defineField({\n        name: TRANSLATIONS_ARRAY_NAME,\n        type: 'internationalizedArrayReference',\n      }),\n      defineField({\n        name: 'schemaTypes',\n        description:\n          'Optional: Used to filter the reference fields above so all translations share the same types.',\n        type: 'array',\n        // For some reason TS dislikes this line because of the DocumentDefinition return type\n        // @ts-expect-error\n        of: [{type: 'string'}],\n        options: {list: schemaTypes},\n        readOnly: ({value}) => Boolean(value),\n      }),\n      ...metadataFields,\n    ],\n    preview: {\n      select: {\n        translations: TRANSLATIONS_ARRAY_NAME,\n        documentSchemaTypes: 'schemaTypes',\n      },\n      prepare(selection) {\n        const {translations = [], documentSchemaTypes = []} = selection\n        const title =\n          translations.length === 1\n            ? `1 Translation`\n            : `${translations.length} Translations`\n        const languageKeys = translations.length\n          ? translations\n              .map((t: {_key: string}) => t._key.toUpperCase())\n              .join(', ')\n          : ``\n        const subtitle = [\n          languageKeys ? `(${languageKeys})` : null,\n          documentSchemaTypes?.length\n            ? documentSchemaTypes.map((s: string) => s).join(`, `)\n            : ``,\n        ]\n          .filter(Boolean)\n          .join(` `)\n\n        return {\n          title,\n          subtitle,\n        }\n      },\n    },\n  })\n","import {Stack} from '@sanity/ui'\nimport {defineField, definePlugin, isSanityDocument} from 'sanity'\nimport {internationalizedArray} from 'sanity-plugin-internationalized-array'\n\nimport {DeleteMetadataAction} from './actions/DeleteMetadataAction'\nimport {LanguageBadge} from './badges'\nimport BulkPublish from './components/BulkPublish'\nimport {DocumentInternationalizationProvider} from './components/DocumentInternationalizationContext'\nimport {DocumentInternationalizationMenu} from './components/DocumentInternationalizationMenu'\nimport OptimisticallyStrengthen from './components/OptimisticallyStrengthen'\nimport {API_VERSION, DEFAULT_CONFIG, METADATA_SCHEMA_NAME} from './constants'\nimport metadata from './schema/translation/metadata'\nimport {PluginConfig, TranslationReference} from './types'\n\nexport const documentInternationalization = definePlugin<PluginConfig>(\n  (config) => {\n    const pluginConfig = {...DEFAULT_CONFIG, ...config}\n    const {\n      supportedLanguages,\n      schemaTypes,\n      languageField,\n      bulkPublish,\n      metadataFields,\n    } = pluginConfig\n\n    if (schemaTypes.length === 0) {\n      throw new Error(\n        'You must specify at least one schema type on which to enable document internationalization. Update the `schemaTypes` option in the documentInternationalization() configuration.'\n      )\n    }\n\n    return {\n      name: '@sanity/document-internationalization',\n\n      studio: {\n        components: {\n          layout: (props) =>\n            DocumentInternationalizationProvider({...props, pluginConfig}),\n        },\n      },\n\n      // Adds:\n      // - A bulk-publishing UI component to the form\n      // - Will only work for projects on a compatible plan\n      form: {\n        components: {\n          input: (props) => {\n            if (\n              props.id === 'root' &&\n              props.schemaType.name === METADATA_SCHEMA_NAME &&\n              isSanityDocument(props?.value)\n            ) {\n              const metadataId = props?.value?._id\n              const translations =\n                (props?.value?.translations as TranslationReference[]) ?? []\n              const weakAndTypedTranslations = translations.filter(\n                ({value}) => value && value._weak && value._strengthenOnPublish\n              )\n\n              return (\n                <Stack space={5}>\n                  {bulkPublish ? (\n                    <BulkPublish translations={translations} />\n                  ) : null}\n                  {weakAndTypedTranslations.length > 0 ? (\n                    <OptimisticallyStrengthen\n                      metadataId={metadataId}\n                      translations={weakAndTypedTranslations}\n                    />\n                  ) : null}\n                  {props.renderDefault(props)}\n                </Stack>\n              )\n            }\n\n            return props.renderDefault(props)\n          },\n        },\n      },\n\n      // Adds:\n      // - The `Translations` dropdown to the editing form\n      // - `Badges` to documents with a language value\n      // - The `DeleteMetadataAction` action to the metadata document type\n      document: {\n        unstable_languageFilter: (prev, ctx) => {\n          const {schemaType, documentId} = ctx\n\n          return schemaTypes.includes(schemaType) && documentId\n            ? [\n                ...prev,\n                (props) =>\n                  DocumentInternationalizationMenu({...props, documentId}),\n              ]\n            : prev\n        },\n        badges: (prev, {schemaType}) => {\n          if (!schemaTypes.includes(schemaType)) {\n            return prev\n          }\n\n          return [(props) => LanguageBadge(props), ...prev]\n        },\n        actions: (prev, {schemaType}) => {\n          if (schemaType === METADATA_SCHEMA_NAME) {\n            return [...prev, DeleteMetadataAction]\n          }\n\n          return prev\n        },\n      },\n\n      // Adds:\n      // - The `Translations metadata` document type to the schema\n      schema: {\n        // Create the metadata document type\n        types: [metadata(schemaTypes, metadataFields)],\n\n        // For every schema type this plugin is enabled on\n        // Create an initial value template to set the language\n        templates: (prev, {schema}) => {\n          // Templates are not setup for async languages\n          if (!Array.isArray(supportedLanguages)) {\n            return prev\n          }\n\n          const parameterizedTemplates = schemaTypes.map((schemaType) => ({\n            id: `${schemaType}-parameterized`,\n            title: `${\n              schema?.get(schemaType)?.title ?? schemaType\n            }: with Language`,\n            schemaType,\n            parameters: [\n              {name: `languageId`, title: `Language ID`, type: `string`},\n            ],\n            value: ({languageId}: {languageId: string}) => ({\n              [languageField]: languageId,\n            }),\n          }))\n\n          const staticTemplates = schemaTypes.flatMap((schemaType) => {\n            return supportedLanguages.map((language) => ({\n              id: `${schemaType}-${language.id}`,\n              title: `${language.title} ${\n                schema?.get(schemaType)?.title ?? schemaType\n              }`,\n              schemaType,\n              value: {\n                [languageField]: language.id,\n              },\n            }))\n          })\n\n          return [...prev, ...parameterizedTemplates, ...staticTemplates]\n        },\n      },\n\n      // Uses:\n      // - `sanity-plugin-internationalized-array` to maintain the translations array\n      plugins: [\n        // Translation metadata stores its references using this plugin\n        // It cuts down on attribute usage and gives UI conveniences to add new translations\n        internationalizedArray({\n          languages: supportedLanguages,\n          fieldTypes: [\n            defineField(\n              {\n                name: 'reference',\n                type: 'reference',\n                to: schemaTypes.map((type) => ({type})),\n                weak: pluginConfig.weakReferences,\n                // Reference filters don't actually enforce validation!\n                validation: (Rule) =>\n                  Rule.custom(async (item: TranslationReference, context) => {\n                    if (!item?.value?._ref || !item?._key) {\n                      return true\n                    }\n\n                    const client = context.getClient({apiVersion: API_VERSION})\n                    const valueLanguage = await client.fetch(\n                      `*[_id in [$ref, $draftRef]][0].${languageField}`,\n                      {\n                        ref: item.value._ref,\n                        draftRef: `drafts.${item.value._ref}`,\n                      }\n                    )\n\n                    if (valueLanguage && valueLanguage === item._key) {\n                      return true\n                    }\n\n                    return `Referenced document does not have the correct language value`\n                  }),\n                options: {\n                  // TODO: Update type once it knows the values of this filter\n                  // @ts-expect-error\n                  filter: ({parent, document}) => {\n                    if (!parent) return null\n\n                    // I'm not sure in what instance there's an array of parents\n                    // But the Type suggests it's possible\n                    const parentArray = Array.isArray(parent)\n                      ? parent\n                      : [parent]\n                    const language = parentArray.find((p) => p._key)\n\n                    if (!language?._key) return null\n\n                    if (document.schemaTypes) {\n                      return {\n                        filter: `_type in $schemaTypes && ${languageField} == $language`,\n                        params: {\n                          schemaTypes: document.schemaTypes,\n                          language: language._key,\n                        },\n                      }\n                    }\n\n                    return {\n                      filter: `${languageField} == $language`,\n                      params: {language: language._key},\n                    }\n                  },\n                },\n              },\n              {strict: false}\n            ),\n          ],\n        }),\n      ],\n    }\n  }\n)\n"],"names":["DocumentPreview","props","schema","useSchema","schemaType","get","type","jsx","Feedback","tone","title","Preview","value","METADATA_SCHEMA_NAME","TRANSLATIONS_ARRAY_NAME","API_VERSION","DEFAULT_CONFIG","supportedLanguages","schemaTypes","languageField","weakReferences","bulkPublish","metadataFields","apiVersion","separateReferences","data","arguments","length","undefined","translations","otherReferences","forEach","doc","_type","push","DeleteTranslationDialog","documentId","setTranslations","loading","useListeningQuery","params","id","initialValue","useMemo","useEffect","Flex","padding","align","justify","children","Spinner","jsxs","Stack","space","Text","Card","border","size","weight","Fragment","borderTop","map","translation","_id","reference","DeleteTranslationFooter","onClose","onProceed","Grid","columns","gap","Button","text","onClick","mode","shallowEqualArrays","arrA","arrB","equal","a","b","len","i","globalCache","query","query$1","fn","keys","preload","config","entry","Object","prototype","hasOwnProperty","call","error","response","promise","then","lifespan","setTimeout","index","indexOf","splice","catch","suspend","DocumentInternationalizationContext","createContext","useDocumentInternationalizationContext","useContext","DocumentInternationalizationProvider","pluginConfig","client","useClient","Array","isArray","Provider","renderDefault","DeleteTranslationAction","published","draft","isDialogOpen","setDialogOpen","useState","useCallback","documentLanguage","toast","useToast","tx","transaction","operation","patch","unset","concat","delete","commit","status","description","err","message","label","disabled","icon","TrashIcon","onHandle","dialog","header","content","footer","useTranslationMetadata","translationSchema","useOpenInNewPane","routerContext","RouterContext","routerPanesState","groupIndex","usePaneRouter","openInNewPane","navigateIntent","panes","href","resolvePathFromState","navigateUrl","path","LanguageManage","open","Tooltip","Box","muted","fallbackPlacements","placement","portal","CogIcon","useOpenInCurrentPane","openInCurrentPane","createReference","key","ref","strengthenOnPublish","_key","_ref","_weak","_strengthenOnPublish","LanguageOption","_a","language","current","source","sourceLanguageId","metadata","metadataId","find","t","handleOpen","handleCreate","Error","newTranslationDocumentId","uuid","newTranslationDocument","create","sourceReference","newTranslationReference","newMetadataDocument","createIfNotExists","metadataPatch","setIfMissing","insert","metadataExisted","Boolean","_createdAt","console","SplitVerticalIcon","CheckmarkIcon","AddIcon","flex","Badge","LanguagePatch","handleClick","currentId","set","EditIcon","ConstrainedBox","styled","_templateObject","_taggedTemplateLiteral","Warning","DocumentInternationalizationMenu","name","setQuery","handleQuery","event","currentTarget","setOpen","o","button","setButton","popover","setPopover","handleClickOutside","useClickOutside","useEditState","documentIsInOneMetadataDocument","sourceLanguageIsValid","some","l","allLanguagesAreValid","valid","every","warn","TextInput","onChange","placeholder","filter","toLowerCase","includes","issueWithTranslations","Popover","constrainSize","overflow","TranslateIcon","selected","DeleteMetadataAction","onComplete","onCancel","onConfirm","LanguageBadge","_b","languageId","String","color","DocumentCheck","onCheckComplete","addInvalidId","removeInvalidId","addDraftId","removeDraftId","editState","isValidating","validation","useValidationStatus","validationHasErrors","item","level","layout","InfoIcon","Icon","TextWithTone","Info","InfoOutlineIcon","style","maxWidth","BulkPublish","projectId","dataset","useWorkspace","invalidIds","setInvalidIds","checkedIds","setCheckedIds","ids","from","Set","onOpen","draftIds","setDraftIds","handleBulkPublish","body","request","uri","method","radius","Inline","Dialog","zOffset","width","ReferencePatcher","documentType","useDocumentPane","ready","referencePathBase","PatchEvent","OptimisticallyStrengthen","defineType","liveEdit","fields","defineField","of","options","list","readOnly","_ref2","preview","select","documentSchemaTypes","prepare","selection","languageKeys","toUpperCase","join","subtitle","s","documentInternationalization","definePlugin","studio","components","form","input","_c","isSanityDocument","weakAndTypedTranslations","_ref3","document","unstable_languageFilter","prev","ctx","badges","_ref4","actions","_ref5","types","templates","_ref6","parameterizedTemplates","parameters","_ref7","staticTemplates","flatMap","plugins","internationalizedArray","languages","fieldTypes","to","weak","Rule","custom","context","getClient","valueLanguage","fetch","draftRef","_ref8","parent","parentArray","p","strict"],"mappings":"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","x_google_ignoreList":[5]}